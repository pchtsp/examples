## ams_version=1.0

Model Main_FilterDesign {
    Comment: {
        "Filter design
        
        Problem type:
        SOCP (small)
        
        Keywords:
        FIR, conic programming, second-order cone, SOCP.
        
        Description:
        Minimax dB linear phase lowpass filter design. The problem is to find the
        filter weights for a finite impulse response (FIR) filter. This model forms
        an approximation by discretizing the frequency variable (omega) resulting
        in a second-order cone programming (SOCP) problem. SOCP problems can be
        solved by CPLEX and Gurobi.
        
        References:
        Lobo, M.S., L. Vandenberghe, S. Boyd, H. Lebret, Applications of Second-order
        Cone Programming, Linear Algebra and its Applications 284(1-3) 1998,
        pp. 193-228."
    }
    DeclarationSection Declaration_Model {
        Parameter NumberOfFrequencies {
            Range: integer;
            InitialData: 180;
        }
        Set Frequencies {
            SubsetOf: Integers;
            Index: i;
            Definition: {
                {0..NumberOfFrequencies}
            }
        }
        Parameter NumberOfDiscretizationPoints {
            Range: integer;
            InitialData: 20;
        }
        Set DiscretizationPoints {
            SubsetOf: Integers;
            Index: k;
            Definition: {
                {0..NumberOfDiscretizationPoints-1}
            }
            Comment: "Discretization points for first half of the (symmetric) filter.";
        }
        Parameter FilterLength {
            Range: integer;
            Definition: 2 * NumberOfDiscretizationPoints;
        }
        Parameter LastPassbandFrequency {
            Range: integer;
            Definition: NumberOfFrequencies/2;
            Comment: "The length of the FIR filter.";
        }
        Set PassbandFrequencies {
            SubsetOf: Frequencies;
            Index: pf;
            Definition: {
                {0..LastPassbandFrequency}
            }
        }
        Parameter FirstStopbandFrequency {
            Range: integer;
            Definition: 2*NumberOfFrequencies/3;
        }
        Set StopbandFrequencies {
            SubsetOf: Frequencies;
            Index: sf;
            Definition: {
                {FirstStopbandFrequency..NumberOfFrequencies}
            }
        }
        Parameter Beta {
            InitialData: 0.01;
        }
        Parameter Frequency {
            IndexDomain: (i);
            Definition: {
                i*Pi/180;
            }
            Comment: "Frequency \"variable\" omega.";
        }
        Parameter pi {
            Definition: 4 * arctan(1);
        }
        Variable Deviation {
            Range: [1, inf);
        }
        Variable DeviationReciprocal {
            Range: nonnegative;
            Comment: "The reciprocal of variable Deviation, i.e., DeviationReciprocal = 1/Deviation.";
        }
        Variable FilterCoefficient {
            IndexDomain: (k);
            Range: free;
            Comment: {
                "The coefficients (impulse response) of a finite impulse response (FIR) filter.
                We assume that the filter coefficients are symmetric and therefore we only need
                variables for (the first) half of the filter."
            }
        }
        Variable obj {
            Range: free;
            Definition: Deviation;
            Comment: "Minimax deviation of the filter magnitude measured in decibels (dB).";
        }
        Constraint DeviationConstraint {
            Definition: 4+y^2 <= x^2;
            Comment: {
                "Second-order cone reformulation of the constraint
                	sqrt(4 + (Deviation-DeviationReciprocal)^2) <= Deviation+DeviationReciprocal
                using the intermediate variables
                	x = DeviationReciprocal + Deviation
                	y = DeviationReciprocal - Deviation"
            }
        }
        Variable x {
            Range: nonnegative;
            Definition: DeviationReciprocal + Deviation;
            Comment: "Intermediate variable used to reformulate problem as SOCP.";
        }
        Variable y {
            Range: free;
            Definition: DeviationReciprocal - Deviation;
            Comment: "Intermediate variable used to reformulate problem as SOCP.";
        }
        Constraint PassBandDeviationUpperBound {
            IndexDomain: pf;
            Definition: {
                2 * sum[ k, FilterCoefficient(k) * cos((k-(FilterLength-1)/2)*Frequency(pf)) ]
                <=
                Deviation
            }
        }
        Constraint PassBandDeviationLowerBound {
            IndexDomain: pf;
            Definition: {
                2 * sum[ k, FilterCoefficient(k) * cos((k-(FilterLength-1)/2)*Frequency(pf)) ]
                >=
                DeviationReciprocal
            }
        }
        Constraint StopBandUppperBound {
            IndexDomain: sf;
            Definition: {
                2 * sum[ k, FilterCoefficient(k) * cos((k-(FilterLength-1)/2)*Frequency(sf)) ]
                <=
                Beta
            }
        }
        Constraint StopBandLowerBound {
            IndexDomain: sf;
            Definition: {
                2 * sum[ k, FilterCoefficient(k) * cos((k-(FilterLength-1)/2)*Frequency(sf)) ]
                >=
                -Beta
            }
        }
        MathematicalProgram LeastT {
            Objective: obj;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
            Type: QCP;
        }
    }
    DeclarationSection Declaration_Results_Display {
        Set FilterDiscretizationPoints {
            SubsetOf: Integers;
            Index: j;
            Definition: {
                {0..FilterLength-1}
            }
            Comment: {
                "Discretization points for first and second half of the (symmetric) filter.
                This set is only used to display the filter coefficients for the complete
                filter (using parameter FilterCoefficientComplete)."
            }
        }
        Parameter FilterCoefficientComplete {
            IndexDomain: j;
            Range: free;
            Definition: {
                if (j<=FilterLength/2-1) then
                	FilterCoefficient(j)
                else
                	FilterCoefficient(FilterLength-j-1)
                endif
            }
            Comment: {
                "The variable FilterCoefficient only captures the first half of the symmetric
                filter coefficients. This parameter is used to display the complete filter
                in which the second half is a mirror view of the first half."
            }
        }
    }
    Procedure MainInitialization;
    Procedure MainExecution {
        Body: {
            Deviation := 1.04649;
            DeviationReciprocal := 0.955577;
            
            FilterCoefficient[0] :=  -0.00503552;
            FilterCoefficient[1] :=   0.0196456;
            FilterCoefficient[2] :=   0.0246178;
            FilterCoefficient[3] :=  -0.0242968;
            FilterCoefficient[4] :=  -0.0189922;
            FilterCoefficient[5] :=   0.0569488;
            FilterCoefficient[6] :=   0.000586451;
            FilterCoefficient[7] :=  -0.117416;
            FilterCoefficient[8] :=   0.0895147;
            FilterCoefficient[9] :=   0.497671;
            
            x := DeviationReciprocal+Deviation;
            y := DeviationReciprocal-Deviation;
            obj := Deviation;
            
            solve LeastT;
        }
    }
    Procedure MainTermination {
        Body: {
            return DataManagementExit();
        }
    }
}
